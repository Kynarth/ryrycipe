apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'ryrycipe.Ryrycipe'
sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.testfx:testfx-core:4.0.0-SNAPSHOT'
    compile 'com.intellij:annotations:12.0'
    compile 'org.xerial:sqlite-jdbc:3.8.9.1'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.dropbox.core:dropbox-core-sdk:1.7.7'
    compile 'org.jasypt:jasypt:1.9.2'
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.guava:guava:18.0'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/java', 'src/main/resources']
            includes = ['**/*.fxml', '**/*.properties', '**/*.png', '**/*.css', '**/*.db', '**/*.xml', '**/*.json']
        }
    }

    test {
        resources {
            srcDirs = ['src/test/java', 'src/test/resources']
            includes = ['**/*.fxml', '**/*.properties', '**/*.png', '**/*.css', '**/*.db', '**/*.xml', '**/*.json']
        }
    }
}

//test {
//    testLogging {
//        showStandardStreams = true
//    }
//}

// Jar with dependencies
jar {
    manifest {
        attributes("Implementation-Title": "Ryrycipe",
                "Implementation-Version": version,
                "Main-Class": mainClassName
        )
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Convert all properties files in utf-8 format
task convertUtf8 << {
    FileTree tree = fileTree(dir: 'src/main/resources')
    tree.include '**/*.properties'

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        tree.each {
            File file -> exec {
                commandLine "${System.env.JAVA_HOME}${File.separator}bin${File.separator}native2ascii",
                        '-encoding', 'utf-8', file, file
            }
        }
    } else {
        tree.each {File file -> exec {commandLine "native2ascii", '-encoding', 'utf-8', file, file}}
    }
}

// Create self contained application
task buildSelfContainedApp << {

    exec {
        workingDir "${project.projectDir.absolutePath}"

        commandLine "${System.env.JAVA_HOME}${File.separator}bin${File.separator}javafxpackager",
                "-deploy",
                "-native",
                "-name", "Ryrycipe",
                "-outdir", "${buildDir.name}${File.separator}dist",
                "-outfile", "Ryrycipe",
                "-srcdir", "${buildDir.name}${File.separator}${libsDir.name}",
                "-appclass", mainClassName
    }
}
